name: Build and Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # --- Установка зависимостей ---
    # Шаг для Linux удален, так как g++ и ninja уже есть в образе ubuntu-latest.

    - name: Set up Ninja (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install ninja
      # Clang, который идет с Xcode, будет использован по умолчанию.

    - name: Set up Ninja (Windows)
      if: runner.os == 'Windows'
      # MSVC, идущий с windows-latest, будет использован по умолчанию.
      run: pip install ninja

    # --- Конфигурация и сборка CMake ---

    - name: Configure CMake
      run: cmake -B build -G Ninja
      # Явное указание компилятора для Linux убрано.
      # CMake автоматически подхватит компилятор по умолчанию для каждой ОС.

    - name: Build project
      run: cmake --build build --config Release -- -j $(nproc || sysctl -n hw.ncpu || echo 2)
      # Используем nproc (Linux), sysctl (macOS) или фолбэк на 2 ядра для параллельной сборки

    # --- Тестирование (пока просто запуск) ---

    - name: Run application (Linux/macOS)
      if: runner.os != 'Windows'
      run: ./build/app/AApplication

    - name: Run application (Windows)
      if: runner.os == 'Windows'
      timeout-minutes: 5 # Таймаут на всякий случай можно оставить
      run: ./build/app/AApplication.exe