# .github/workflows/build_and_test.yml

name: Build and Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # --- Установка зависимостей ---

    - name: Set up C++ compiler (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y g++-14 ninja-build
      # Примечание: g++-14 уже должен быть доступен в ubuntu-latest из PPA,
      # но явная установка надежнее. Ninja ставится из стандартных репозиториев.

    - name: Set up C++ compiler (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install ninja
      # Clang, который идет с Xcode, будет использован по умолчанию.

    - name: Set up C++ compiler (Windows)
      if: runner.os == 'Windows'
      # MSVC, идущий с windows-latest, будет использован по умолчанию.
      # Установим Ninja через pip.
      run: pip install ninja

    # --- Конфигурация и сборка CMake ---

    - name: Configure CMake (Linux)
      if: runner.os == 'Linux'
      run: >
        cmake -B build -G Ninja
        -DCMAKE_C_COMPILER=gcc-14
        -DCMAKE_CXX_COMPILER=g++-14

    - name: Configure CMake (non-Linux)
      if: runner.os != 'Linux'
      run: cmake -B build -G Ninja

    - name: Build project
      run: cmake --build build --config Release -- -j $(nproc || sysctl -n hw.ncpu || echo 2)
      # Используем nproc (Linux), sysctl (macOS) или фолбэк на 2 ядра для параллельной сборки

    # --- Тестирование (пока просто запуск) ---

    - name: Run application (Linux/macOS)
      if: runner.os != 'Windows'
      run: ./build/app/AApplication

    - name: Run application (Windows)
      if: runner.os == 'Windows'
      run: ./build/app/AApplication.exe